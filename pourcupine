import collections
import json
import os
import re
import shutil
import stat
import subprocess
import tempfile
import time


config_path = os.path.expanduser('~/.pourcupinerc')
with open(config_path) as config_file:
    config = json.loads(config_file.read(), object_pairs_hook=collections.OrderedDict)

def get_default_branch():
    result = subprocess.run(['git', 'remote', 'show', 'upstream'], stdout=subprocess.PIPE, universal_newlines=True)
    result.check_returncode()
    return re.search('HEAD branch: (.*)', result.stdout).group(1)

for repository, info in config['repositories'].items():
    with tempfile.TemporaryDirectory() as directory:
        try:
            os.chdir(directory)
            info['step'] = 'clone'
            subprocess.run(['git', 'clone', repository, '.']).check_returncode()
            subprocess.run(['git', 'remote', 'add', 'upstream', info['source']]).check_returncode()
            info['step'] = 'fetch'
            subprocess.run(['git', 'fetch', 'upstream']).check_returncode()
            info['step'] = 'merge'
            subprocess.run(['git', 'merge', '--ff-only', 'upstream/{}'.format(get_default_branch())]).check_returncode()
            info['step'] = 'push'
            subprocess.run(['git', 'push']).check_returncode()
            del info['step']
            info['status'] = 'success'
            info['update-time'] = time.time()
        except KeyboardInterrupt:
            info['status'] = 'cancelled'
            break
        except:
            info['status'] = 'failed'
        finally:
            os.chdir('..')
            for root, directories, files in os.walk(directory):
                for name in files:
                    os.chmod(os.path.join(root, name), stat.S_IWRITE)

with open(config_path, 'w') as config_file:
    config_file.write(json.dumps(config, indent=4))
